<?php
/*
	Plugin Name: WP Pocket
	Plugin URI: http://www.wp-pocket.com/
	Description: WP Pocket is a Wordpress plugin, with which you can post interessting links from Pocket automaticly on your blog - with autogenerated titles, discriptions and tags.
	Author: Jan Karres
	Author URI: http://www.jankarres.de/
	Version: 1.2.2
*/
if(!class_exists('wppocketer')) {
	class wppocketer {
		private $wpdb;
		private $version;
		
		// Pocket default Consumer-Key by developer
		private $global_pocket_consumer_key;
	
		function __construct() {
			global $wpdb;
			
			// Set database
			$this->wpdb = $wpdb;
			
			// Set plugin version
			$this->version = '1.2.2';
		
			// Check WP version
			add_action('init', array(&$this, 'requires_versions'));
		
			// Change plugin status hooks
			register_activation_hook(__FILE__, array(&$this, 'activate'));
			register_deactivation_hook(__FILE__, array(&$this, 'deactivate'));
			
			// Hook a main page
			add_action('admin_menu', array(&$this, 'main_link'));
			
			// Hook an option page
			add_action('admin_menu', array(&$this, 'options_link'));
			
			// Add javascripts of the plugin in the system
			wp_register_script('wppocket_main', plugins_url('js/main.js', __FILE__), array('jquery', 'jquery-ui-core', 'jquery-ui-draggable', 'jquery-ui-droppable'));
			
			// Pocket default Consumer-Key by developer
			$this->global_pocket_consumer_key = '10481-1069ebc911a9483c145d3d92';
		}
		
		// Check if requied versions are supported
		function requires_versions() {
			global $wp_version;
			
			include_once(ABSPATH . 'wp-admin/includes/plugin.php'); 
			$plugin = plugin_basename(__FILE__);
			
			// Check WP version
			if (version_compare($wp_version, '3.4', '<')) {
				if(is_plugin_active($plugin)) {
					deactivate_plugins($plugin);
					wp_die('<i>WP Pocket</i> requires WordPress 3.4 or higher. The plugin has been deactivated! Please update WordPress and try again.<br /><br />Back to <a href="' . admin_url() . '">WordPress Dashboard</a>.');
				}
			}
			
			// Check PHP Version
			if (!version_compare(PHP_VERSION, '5.2', '>=')) {
				deactivate_plugins($plugin);
				wp_die('<i>WP Pocket</i> requires PHP 5.2 or higher. The plugin has been deactivated! Please update your PHP and try again.<br /><br />Back to <a href="' . admin_url() . '">WordPress Dashboard</a>.');
			}
			
			// Check if cURL is available
			if (!function_exists('curl_init')){
				if(is_plugin_active($plugin)) {
					deactivate_plugins($plugin);
					wp_die('<i>WP Pocket</i> requires cURL. The plugin has been deactivated! Please activate it or ask your webhoster to activate it.<br /><br />Back to <a href="' . admin_url() . '">WordPress Dashboard</a>.');
				}
			}
		}

		function activate() {
			// Create database table for links
			$sql = '
			CREATE TABLE IF NOT EXISTS `' . $this->wpdb->prefix . 'wppocket_posted_links` (
				`id` int(255) NOT NULL AUTO_INCREMENT,
				`url` varchar(1000) NOT NULL,
				`timestamp` int(255) NOT NULL,
				PRIMARY KEY (`id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;
			';
			$this->wpdb->query($sql);
			
			// Create settings in database
			$sql = '
			INSERT IGNORE INTO `' . $this->wpdb->prefix . 'options` (
				`option_name` ,
				`option_value` ,
				`autoload`
			) VALUES
				("wppocket_version", "' . $this->version . '", "yes"),
				("wppocket_links_to_use", "0", "yes"),
				("wppocket_faved", "0", "yes"),
				("wppocket_order", "0", "yes"),
				("wppocket_mark_as_readed", "0", "yes"),
				("wppocket_clean_url", "1", "yes"),
				("wppocket_meta_keyword_as_tags", "0", "yes"),
				("wppocket_reference_wppocket", "0", "yes"),
				("wppocket_ping_status", "open", "yes"),
				("wppocket_comment_status", "open", "yes"),
				("wppocket_post_status", "draft", "yes"),
				("wppocket_post_category", "1", "yes"),
				("wppocket_pocket_username", "", "yes"),
				("wppocket_pocket_access_key", "", "yes"),
				("wppocket_title", "WP Pocket link collection: %%month%% with %%count%% links", "yes"),
				("wppocket_introduction_text", "", "yes"),
				("wppocket_statements_text", "", "yes"),
				("wppocket_entry_building", "<strong>%%title%%</strong>[[: %%description%%]][[ - by %%author%%]][[ - Tags: %%tags%%]] - %%url%%", "yes"),
				("wppocket_language", "en", "yes"),
				("wppocket_statistics", "1", "yes"),
				("wppocket_key_a", "' . $this->keygen(128) . '", "yes"),
				("wppocket_key_b", "' . $this->keygen(128) . '", "yes")
			';
			$this->wpdb->query($sql);
			
			// Check if version under 1.0.2, if true, replace Pocket username, password and api-key
			if (!version_compare(get_option('wppocket_version'), '1.0.2', '>=')) {
				// Update Pocket username, password and api-key
				update_option('wppocket_pocket_username', $this->xcrypt(0, $this->xcrypt(1, get_option('wppocket_pocket_username'), true)));
				update_option('wppocket_pocket_password', $this->xcrypt(0, $this->xcrypt(1, get_option('wppocket_pocket_password'), true)));
				update_option('wppocket_pocket_api_key', $this->xcrypt(0, $this->xcrypt(1, get_option('wppocket_pocket_api_key'), true)));
			}
			
			// Check if version under 1.2, if true, remove api-key for consumer-key, remove password, api custom key and reset username
			if (!version_compare(get_option('wppocket_version'), '1.2', '>=')) {
				// Remove api key
				$sql = 'DELETE FROM `wp_options` WHERE `option_name`="wppocket_pocket_api_key" OR `option_name`="wppocket_pocket_password" OR `option_name`="wppocket_pocket_api_key_custom"';
				$this->wpdb->query($sql);
				
				// Reset username
				$sql = 'UPDATE `wp_options` SET `option_value` = "" WHERE `option_name`="wppocket_pocket_username";';
				$this->wpdb->query($sql);
			}
			
			// Create Customer Key in database
			$sql = '
			INSERT IGNORE INTO `' . $this->wpdb->prefix . 'options` (
				`option_name` ,
				`option_value` ,
				`autoload`
			) VALUES
				("wppocket_pocket_consumer_key_custom", "0", "yes"),
				("wppocket_pocket_consumer_key", "' . $this->xcrypt(0, $this->global_pocket_consumer_key) . '", "yes")
			';
			$this->wpdb->query($sql);
			
			// Check if plugin version number up to date
			if (get_option('wppocket_version') != $this->version) {
				// Send statistics, if allowed
				if (get_option('wppocket_statistics') == 1) {
					$this->statisticsUpdateVersion();
				}
				
				// Update version number
				update_option('wppocket_version', $this->version);
			}
		}

		function deactivate() {
			// nothing to do, because user can reactivate the plugin
		}
		
		// Function to create a plugin_action_links
		function plugin_action_links($links, $file) {
			if ($file == 'wp-pocket/wp-pocket.php') {
				// create link
				array_unshift(
					$links,
					sprintf('<a href="options-general.php?page=%s">%s</a>', 'settings_pocket_poster', __('Settings'))
				);
			}
			
			return $links;
		}
		
		// Gennerator for random keys for encrytion
		private function keygen($length) {
			/*
			 * Required parameters:
			 *		$length = length of the gennerated key
			 */
			 
			$characters = '0123456789qwertzuiopasdfghjklyxcvbnmQWERTZUIOPASDFGHJKLYXCVBNM';
			
			for ($i = 0; $i < $length; $i++) {
				$key .= $characters[mt_rand(0, strlen($characters) - 1)];
			}

			return $key;
		}
		
		// En- and decrypt strings
		private function xcrypt($mode, $string, $nosalt = false) {
			/*
			 * Required parameters:
			 *		$mode = encrypt (0), decrypt (1) 
			 *		$string = String, who shout en-/decrypt
			 */
			
			// Get crypt keys, if should
			if (!$nosalt) {
				$keys['a'] = get_option('wppocket_key_a');
				$key['b'] = get_option('wppocket_key_b');
			}
			
			if ($mode == 0) { // Encrypt
				return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($keys['a']), $string, MCRYPT_MODE_CBC, md5(md5($keys['b']))));
			}elseif ($mode == 1) { // Decrypt
				return rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, md5($keys['a']), base64_decode($string), MCRYPT_MODE_CBC, md5(md5($keys['b']))), "\0");
			}else { // False mode
				return false;
			}
		}
		
		// Easy cURL function
		private function cURL($url, $post, $timeout = 5) {
			// Init cURL
			$cURL = curl_init();
			
			// Define HTTP-Header
			$httpheader = array();
			$httpheader[] = 'Content-type: application/x-www-form-urlencoded;charset=UTF-8'; 
			
			// Settings
			curl_setopt($cURL, CURLOPT_URL, $url);
			curl_setopt($cURL, CURLOPT_HEADER, 0);
			curl_setopt($cURL, CURLOPT_HTTPHEADER, $httpheader);
			curl_setopt($cURL, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($cURL, CURLOPT_TIMEOUT, $timeout);
			
			// Save POST parameter in one string
			if (count($post) != 0) {
				$i = 0;
				foreach ($post as $key => $value) {
					if ($i != 0) {
						$postAsString .= '&';
					}
				
					$postAsString .= $key . '=' . $value;
					
					$i++;
				}
			}
			
			// Set POST parameters
			curl_setopt($cURL, CURLOPT_POST, count($post));
			curl_setopt($cURL, CURLOPT_POSTFIELDS, $postAsString);
			
			// Download
			$output = curl_exec($cURL);
			
			// Close Connection
			curl_close($cURL);
			
			// Return
			return $output;
		}
		
		// Function to check if string in UTF-8 after W3C
		function is_utf8($string) {
			// From http://w3.org/International/questions/qa-forms-utf-8.html
			return preg_match('%^(?:
			[\x09\x0A\x0D\x20-\x7E]            # ASCII
			| [\xC2-\xDF][\x80-\xBF]             # non-overlong 2-byte
			|  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs
			| [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
			|  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates
			|  \xF0[\x90-\xBF][\x80-\xBF]{2}     # planes 1-3
			| [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
			|  \xF4[\x80-\x8F][\x80-\xBF]{2}     # plane 16
			)*$%xs', $string);
		}
		
		// Function to get Pocket user auth after OAuth 2.0
		function authPocketAccountGetRequest() {
			// Define current URL as return URL with GET parameter auth
			$returnUrl = (isset($_SERVER['HTTPS'])?'https':'http') . '://' . $_SERVER['HTTP_HOST'] . str_replace('auth-get', 'auth', $_SERVER['REQUEST_URI']);
			
			// Request authe
			$oAuthRequest = $this->cURL(
				'https://getpocket.com/v3/oauth/request',
				array(
					'consumer_key' => $this->xcrypt(1, get_option('wppocket_pocket_consumer_key')),
					'redirect_uri' => $returnUrl
				)
			);
			
			// Split return, to have [1] the needed request token
			$oAuthRequestToken = explode('=', $oAuthRequest);
			
			// Redirect user to Pocket auth form (via meta, because wp hadalready sent header)
			echo '<meta http-equiv="refresh" content="0;url=' . 'https://getpocket.com/auth/authorize?request_token=' . urlencode($oAuthRequestToken[1]) . '&redirect_uri=' . urlencode($returnUrl . '&token=' . $oAuthRequestToken[1]) . '" />';
			exit;
		}
		
		// Function to save access token of a user
		function authPocketAccountSaveAccessToken() {
			// Define access token by GET
			$oAuthRequestToken = $_GET['token'];
			
			// Request authe
			$oAuthAccess = $this->cURL(
				'https://getpocket.com/v3/oauth/authorize',
				array(
					'consumer_key' => $this->xcrypt(1, get_option('wppocket_pocket_consumer_key')),
					'code' => $oAuthRequestToken
				)
			);
			
			// Split return to have access token and username seperated ([0][1] = access_key; [1][1] = username)
			$oAuthAccess = explode('&', $oAuthAccess);
			$oAuthAccess[0] = explode('=', $oAuthAccess[0]);
			$oAuthAccess[1] = explode('=', $oAuthAccess[1]);
			
			// Check if access key and username are set
			if ($oAuthAccess[0][1] != '' && $oAuthAccess[1][1] != '') {
				// Save auth key and username
				update_option('wppocket_pocket_access_key', $this->xcrypt(0, $oAuthAccess[0][1]));
				update_option('wppocket_pocket_username', $this->xcrypt(0, $oAuthAccess[1][1]));
				
				// Redirect user to success page. Print not here, because if the user refresh, the auth would fail.
				echo '<meta http-equiv="refresh" content="0;url=' . 'options-general.php?page=settings_pocket_poster&auth-success" />';
				exit;
			}else {
				// Print, the auth faild
				echo '<div id="message" class="error">';
					echo '<p><strong>The authentication of your Pocket account failed. Please try again!</strong></p>';
				echo '</div>';
			}
		}
		
		// Function to clean links of unneeded shares
		function cleanUpURL($url) {
			// Filter $_GET[p], falls vorhanden, aus link
			preg_match('/p=(.*)/', $url, $matches);
			$matches = explode('&', $matches[0]);
			
			// Clean url
			$url = explode('?', $url);
			$url = $url[0];
			
			// If $_GET[p] founded, add this
			if (count($matches) != 0 && $matches[0] != '') {
				$url = $url . '?' . $matches[0];
			}
			
			return $url;
		}
		
		// Function to replace variables in the entry building
		function replaceEntryBuilding($title, $description, $url, $tags, $author, $countwords, $replace = true) {
			$wppocket_entry_building = get_option('wppocket_entry_building');
			
			// Set the variables, if should do this
			if ($replace) {
				$wppocket_entry_building = str_replace('%%title%%', $title, $wppocket_entry_building);
				$wppocket_entry_building = str_replace('%%description%%', $description, $wppocket_entry_building);
				$wppocket_entry_building = str_replace('%%url%%', $url, $wppocket_entry_building);
				$wppocket_entry_building = str_replace('%%tags%%', $tags, $wppocket_entry_building);
				$wppocket_entry_building = str_replace('%%author%%', $author, $wppocket_entry_building);
				$wppocket_entry_building = str_replace('%%countwords%%', $countwords, $wppocket_entry_building);
			}
			
			// Explode the entry building, by replace ]] throw [[ for find seperators
			$wppocket_entry_building = explode('[[', str_replace(']]','[[', $wppocket_entry_building));
			
			// Return the result Array
			return $wppocket_entry_building;
		}
		
		// Function to replace variables in the title of the post
		function getReplacedTitle($countLinks, $replace = true) {
			$wppocket_title = get_option('wppocket_title');
			
			// Set the variables, if should do this
			if ($replace) {
				$wppocket_title = str_replace('%%day%%', $this->getReplaceLanguageDependentStrings(date('l')), $wppocket_title);
				$wppocket_title = str_replace('%%month%%', $this->getReplaceLanguageDependentStrings(date('F')), $wppocket_title);
				$wppocket_title = str_replace('%%year%%', date('Y'), $wppocket_title);
				$wppocket_title = str_replace('%%count%%', $countLinks, $wppocket_title);
			}
			
			return trim($wppocket_title);
		}
		
		// Function to replace variables in the introduction text
		function getReplacedIntroductionText($countLinks, $replace = true) {
			$wppocket_introduction_text = get_option('wppocket_introduction_text');
			
			// Set the variables, if should do this
			if ($replace) {
				$wppocket_introduction_text = str_replace('%%day%%', $this->getReplaceLanguageDependentStrings(date('l')), $wppocket_introduction_text);
				$wppocket_introduction_text = str_replace('%%month%%', $this->getReplaceLanguageDependentStrings(date('F')), $wppocket_introduction_text);
				$wppocket_introduction_text = str_replace('%%year%%', date('Y'), $wppocket_introduction_text);			
				$wppocket_introduction_text = str_replace('%%count%%', $countLinks, $wppocket_introduction_text);
			}
			
			return trim($wppocket_introduction_text);
		}
		
		// Function to replace variables in the statements text
		function getReplacedStatementsText($countLinks, $replace = true) {
			$wppocket_statements_text = get_option('wppocket_statements_text');
			
			// Set the variables, if should do this
			if ($replace) {
				$wppocket_statements_text = str_replace('%%day%%', $this->getReplaceLanguageDependentStrings(date('l')), $wppocket_statements_text);
				$wppocket_statements_text = str_replace('%%month%%', $this->getReplaceLanguageDependentStrings(date('F')), $wppocket_statements_text);
				$wppocket_statements_text = str_replace('%%year%%', date('Y'), $wppocket_statements_text);
				$wppocket_statements_text = str_replace('%%count%%', $countLinks, $wppocket_statements_text);
			}
			
			return trim($wppocket_statements_text);
		}
		
		// Function to replace language-dependent strings
		function getReplaceLanguageDependentStrings($string) {
			// Check with language is selected
			if (get_option('wppocket_language') == 'de') { // German
				// Return replaced strings
				switch($string) {
					case ('January'):
						return 'Januar';
						break;
					case ('February'):
						return 'Februar';
						break;
					case ('March'):
						return 'März';
						break;
					case ('April'):
						return 'April';
						break;
					case ('May'):
						return 'Mai';
						break;
					case ('June'):
						return 'Juni';
						break;
					case ('July'):
						return 'July';
						break;
					case ('August'):
						return 'August';
						break;
					case ('September'):
						return 'Steptember';
						break;
					case ('October'):
						return 'Oktober';
						break;
					case ('November'):
						return 'November';
						break;
					case ('December'):
						return 'Dezember';
						break;
					
					case ('Monday'):
						return 'Montag';
						break;
					case ('Tuesday'):
						return 'Dienstag';
						break;
					case ('Wednesday'):
						return 'Mittwoch';
						break;
					case ('Thursday'):
						return 'Donnerstag';
						break;
					case ('Friday'):
						return 'Freitag';
						break;
					case ('Saturday'):
						return 'Samstag';
						break;
					case ('Sunday'):
						return 'Sonntag';
						break;
				}
			}else if (get_option('wppocket_language') == 'fr') { // French
				// Return replaced strings
				switch($string) {
					case ('January'):
						return 'janvier';
						break;
					case ('February'):
						return 'février';
						break;
					case ('March'):
						return 'mars';
						break;
					case ('April'):
						return 'avril';
						break;
					case ('May'):
						return 'mai';
						break;
					case ('June'):
						return 'juin';
						break;
					case ('July'):
						return 'juillet';
						break;
					case ('August'):
						return 'août';
						break;
					case ('September'):
						return 'septembre';
						break;
					case ('October'):
						return 'octobre';
						break;
					case ('November'):
						return 'novembre';
						break;
					case ('December'):
						return 'décembre';
						break;
					
					case ('Monday'):
						return 'lundi';
						break;
					case ('Tuesday'):
						return 'mardi';
						break;
					case ('Wednesday'):
						return 'mercredi';
						break;
					case ('Thursday'):
						return 'jeudi';
						break;
					case ('Friday'):
						return 'vendredi';
						break;
					case ('Saturday'):
						return 'samedi';
						break;
					case ('Sunday'):
						return 'dimanche';
						break;
				}
			}else { // English by default
				// Return replaced strings
				switch($string) {
					case ('January'):
						return 'January';
						break;
					case ('February'):
						return 'February';
						break;
					case ('March'):
						return 'March';
						break;
					case ('April'):
						return 'April';
						break;
					case ('May'):
						return 'May';
						break;
					case ('June'):
						return 'June';
						break;
					case ('July'):
						return 'July';
						break;
					case ('August'):
						return 'August';
						break;
					case ('September'):
						return 'September';
						break;
					case ('October'):
						return 'October';
						break;
					case ('November'):
						return 'November';
						break;
					case ('December'):
						return 'December';
						break;
					
					case ('Monday'):
						return 'Monday';
						break;
					case ('Tuesday'):
						return 'Tuesday';
						break;
					case ('Wednesday'):
						return 'Wednesday';
						break;
					case ('Thursday'):
						return 'Thursday';
						break;
					case ('Friday'):
						return 'Friday';
						break;
					case ('Saturday'):
						return 'Saturday';
						break;
					case ('Sunday'):
						return 'Sunday';
						break;
				}
			}
		}
		
		// Function to check if the plugin have access to a Pocket account
		function checkPocketAccess() {
			// Check if username, password and  consumer-key is set, if not, print error
			if (get_option('wppocket_pocket_username') == '' || get_option('wppocket_pocket_access_key') == '' || get_option('wppocket_pocket_consumer_key') == '') {
				?>
				<div id="message" class="error">
					<p><strong>WP Pocket can NOT work. Please authenticate your Pocket account in the WP Pocket options!</strong></p>
				</div>
				<?php
				return false;
			}else { // Test the settings
				// Init cURL
				$getAuth = $this->cURL(
					'https://getpocket.com/v3/send',
					array(
						'consumer_key' => $this->xcrypt(1, get_option('wppocket_pocket_consumer_key')),
						'access_token' => $this->xcrypt(1, get_option('wppocket_pocket_access_key')),
						'actions' => '[{}]'
					)
				);
				
				// Check if, user data and consumer-key correct
				if ($getAuth == '400 Bad Request') {
					?>
					<div id="message" class="error">
						<p><strong>Your Consumer-Key it not valid. Please correct it, else WP Pocket can NOT work.</strong></p>
					</div>
					<?php
					return false;
				}elseif ($getAuth == '401 Unauthorized') {
					?>
					<div id="message" class="error">
						<p><strong>The authentication of you Pocket account is expired. Please reauthenticate it, else WP Pocket can NOT work.</strong></p>
					</div>
					<?php
					return false;
				}else {
					return true;
				}
			}
		}
		
		function changeToWpStacker() {
			?>
			<div style="float: left; max-width: 500px; margin: 40px 0;">
				<p>Dear WP Pocket user,</p>

				<p>in January 2013 I implemented the Pocket API v3 in WP Pocket, so I had to register the plugin at the Pocket developer system. Afterwards the Pocket support wrote to me, 
				the name and branding of the plugin is not compatible with the new branding guidelines.</p>

				<p>Therefore I had to change the name and a few design elements. At WordPress you can not change the name of the plugin. <strong>Hence this plugin dated out with this remove version. 
				The new plugin is called WP Stacker, downloadable at <a href="http://wp-stacker.com/" target="_blank">WP-Stacker.com</a>!</strong></p>

				<p>I hope for your understanding for this step!</p>

				<p>Best,<br />
				<br />
				Jan<br />
				(Developer of WP Pocket / WP Stacker)</p>
			</div>
			<?php
		}
		
		// Support box on the right side of each WP Pocket page
		function support_div($display = true) {
			?>
			<div class="support"<?php if (!$display) {  echo ' style="display: none;"'; } ?>>
				<h3>support me</h3>
				
				<p>If you use the plugin and like it, you can say thanks and support me. How?</p>
				
				<h3>follow me on twitter</h3>
				
				<p>
					<a href="https://twitter.com/jankarres" class="twitter-follow-button" data-show-count="false" data-size="large" data-dnt="true">Follow @jankarres</a>
					<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
				</p>
				
				<h3>report bugs</h3>
				
				<p>
					You found a bug? You have an idea for a feature? Then let me know and send a request on <a href="http://wp-pocket.com/" target="_blank">WP-Pocket.com</a>!
				</p>
				
				<h3>rate the plugin</h3>
				
				<p>
					You can rate the plugin in the <a href="http://wordpress.org/extend/plugins/wp-pocket/" target="_blank">WordPress Plugin Directory</a> and help some other people to know, if this plugin is nice!
				</p>
			</div>
			<?php
		}
		
		// Function to set options page
		function options_link() {
			// Start the view of the options page
			add_options_page('WP Pocket Settings', 'WP Pocket', 'manage_options', 'settings_pocket_poster', array($this, 'options_page_view'));
			
			// Setzte Link
			add_filter('plugin_action_links', array($this, 'plugin_action_links'), 10, 2);
		}
		
		// Options page view
		function options_page_view() {
			// Add option page style
			wp_enqueue_style('wppocket_options', plugins_url('css/options.css', __FILE__));
			wp_enqueue_style('wppocket_support', plugins_url('css/support.css', __FILE__));
			?>
			<div class="wrap wppocket_options">
				<div id="icon-options-general" class="icon32"><br></div>
				<h2>Einstellungen › WP Pocket</h2>
				
				<?php $this->changeToWpStacker(); ?>
			</div>
			<?php
		}
		
		// Options page controller
		function options_page_controller() {
			// Check if should start Pocket auth process
			if (isset($_GET['auth-get'])) {
				// Start Pocket auth process
				$this->authPocketAccountGetRequest();
			}
			
			// Check if should save Pocket access token
			if (isset($_GET['auth'])) {
				// Save Pocket access token
				$this->authPocketAccountSaveAccessToken();
			}
			
			// Check if Pocket account auth saved successfull
			if (isset($_GET['auth-success'])) {
				// Print, the auth succeed
				echo '<div id="message" class="updated">';
					echo '<p><strong>You have successfully authenticated your Pocket Account!</strong></p>';
				echo '</div>';
			}
			
			// Check if setting sended
			if ($_POST['wppocket_edit']) {
				// Error Array
				$error = array();
				
				// Error Text Array
				$errorLang = array(
					'1' => 'Please enter your Pocket Consumer-Key or reset it to use the default key (recommend).',
					'2' => 'Please enter a title for the posts.',
					'3' => 'Please enter a building for each link which will be posted.'
				);
			
				// Update "Pocket Login"
				
				if ($_POST['wppocket_pocket_consumer_key_custom_remove'] == 1) {
					// Set default key
					update_option('wppocket_pocket_consumer_key_custom', 0);
					update_option('wppocket_pocket_consumer_key', $this->xcrypt(0, $this->global_pocket_consumer_key));
					
					// Reset authed Pocket account
					update_option('wppocket_pocket_access_key', '');
					update_option('wppocket_pocket_username', '');
					$changeConsumerKey = true;
				}elseif(get_option('wppocket_pocket_consumer_key_custom') == 1 && $_POST['wppocket_pocket_consumer_key'] == '') {
					$error[] = 1;
				}elseif(get_option('wppocket_pocket_consumer_key_custom') == 1 && $_POST['wppocket_pocket_consumer_key'] != '') {
					// Set new key
					update_option('wppocket_pocket_consumer_key', $this->xcrypt(0, $_POST['wppocket_pocket_consumer_key']));
					
					// Reset authed Pocket account
					update_option('wppocket_pocket_access_key', '');
					update_option('wppocket_pocket_username', '');
					$changeConsumerKey = true;
				}elseif (get_option('wppocket_pocket_consumer_key_custom') == 0 && $_POST['wppocket_pocket_consumer_key'] != '') {
					// Set custom Consumer-Key first time
					update_option('wppocket_pocket_consumer_key_custom', 1);
					update_option('wppocket_pocket_consumer_key', $this->xcrypt(0, $_POST['wppocket_pocket_consumer_key']));
					
					// Reset authed Pocket account
					update_option('wppocket_pocket_access_key', '');
					update_option('wppocket_pocket_username', '');
					$changeConsumerKey = true;
				}
				
				// Updates "Data processing"
				if ($_POST['wppocket_links_to_use'] < 0 && $_POST['wppocket_links_to_use'] > 5) {
					$_POST['wppocket_links_to_use'] = 0;
				}
				
				update_option('wppocket_links_to_use', $_POST['wppocket_links_to_use']);
				update_option('wppocket_faved', $_POST['wppocket_faved']);
				update_option('wppocket_order', $_POST['wppocket_order']);
				update_option('wppocket_mark_as_readed', $_POST['wppocket_mark_as_readed']);
				update_option('wppocket_clean_url', $_POST['wppocket_clean_url']);
				update_option('wppocket_meta_keyword_as_tags', $_POST['wppocket_meta_keyword_as_tags']);
				update_option('wppocket_reference_wppocket', $_POST['wppocket_reference_wppocket']);
				
				// Updates "Post settings"
				
				// Check if post status is valid, else check default
				if (
					$_POST['wppocket_post_status'] != 'publish' &&
					$_POST['wppocket_post_status'] != 'pending' &&
					$_POST['wppocket_post_status'] != 'draft'
				) {
					$_POST['wppocket_post_status'] = 'draft';
				}
				
				// Check if post category is valid, else check default
				if (
					$_POST['wppocket_post_category'] == '' ||
					$_POST['wppocket_post_category'] == 0
				) {
					$_POST['wppocket_post_category'] = 1;
				}
				
				// Check if comment status is valid, else check default
				if (
					$_POST['wppocket_comment_status'] != 'open' &&
					$_POST['wppocket_comment_status'] != 'close'
				) {
					$_POST['wppocket_comment_status'] = 'open';
				}
				
				// Check if comment status is valid, else check default
				if (
					$_POST['wppocket_ping_status'] != 'open' &&
					$_POST['wppocket_ping_status'] != 'close'
				) {
					$_POST['wppocket_ping_status'] = 'open';
				}
				
				update_option('wppocket_post_status', $_POST['wppocket_post_status']);
				update_option('wppocket_post_category', $_POST['wppocket_post_category']);
				update_option('wppocket_comment_status', $_POST['wppocket_comment_status']);
				update_option('wppocket_ping_status', $_POST['wppocket_ping_status']);
				
				// Update "Post content matching"
				
				// Check if title is not set
				if ($_POST['wppocket_title'] == '') {
					$error[] = 2;
				}else {
					update_option('wppocket_title', $_POST['wppocket_title']);
				}
				
				// Chech if entry building is not set
				if ($_POST['wppocket_entry_building'] == '') {
					$error[] = 3;
				}else {
					update_option('wppocket_entry_building', $_POST['wppocket_entry_building']);
				}
				
				// Updates without checks
				update_option('wppocket_introduction_text', $_POST['wppocket_introduction_text']);
				update_option('wppocket_statements_text', $_POST['wppocket_statements_text']);
				
				// WP Pocket settings
				update_option('wppocket_language', $_POST['wppocket_language']);
				update_option('wppocket_statistics', $_POST['wppocket_statistics']);
				
				// Output all errors
				$i = 0;
				while ($i < count($error)) {
					?>
					<div id="message" class="error">
						<p><strong><?php echo $errorLang[$error[$i]]; ?></strong></p>
					</div>
					<?php
					$i++;
				}
				
				// Check if save without misstakes
				if (count($error) == 0) {
					?>
					<div id="message" class="updated">
						<p><strong><?php _e('Settings saved.') ?></strong></p>
					</div>
					<?php
				}
				
				// Check if Consumer-Key was changed. If yes, azth was reseted.
				if ($changeConsumerKey) {
					?>
					<div id="message" class="updated">
						<p><strong>You changed the Consumer-Key. Because of, the authentication of your WP Pocket account was removed. Please reauthenticate!</strong></p>
					</div>
					<?php
				}
			}
			
			// Check Access
			$this->checkPocketAccess();
		}
		
		// Function to set the main page
		function main_link() {		
			// Start the view of the main page
			add_menu_page('WP Pocket', 'WP Pocket', 1, 'pocket_poster', array($this, 'main_page_view'), plugin_dir_url(__FILE__) . 'images/icons/16.png', 25);
		}
		
		// Main page view
		function main_page_view() {
			// Add option page style
			wp_enqueue_style('wppocket_main', plugins_url('css/main.css', __FILE__));
			wp_enqueue_style('wppocket_support', plugins_url('css/support.css', __FILE__));

			// Add JavaScript functions
			wp_enqueue_script('jquery-ui-draggable');
			wp_enqueue_script('jquery-ui-droppable');
			wp_enqueue_script('nav-menu');
			wp_enqueue_script('postbox');
			wp_enqueue_script('wppocket_main');
			?>
			<div class="wrap wppocket">
				<div id="icon-wppocket" class="icon32"><br></div>
				<h2>WP Pocket</h2>
				
				<?php $this->changeToWpStacker(); ?>
			</div>
			<?php
		}
		
		// Options page controller
		function main_page_controller() {
			global $current_user;
			
			// Check if the post sould save
			if ($_POST['mode'] == 'save') { // Save post
				########################
				## SET ENTRY BUILDING ##
				########################
				
				// Set en empty example for entry building with replace
				$replaceEntryBuilding = $this->replaceEntryBuilding(false, false, false, false, false, false);
				
				// Set en empty example for entry building without replace
				$noReplaceEntryBuilding = $this->replaceEntryBuilding(false, false, false, false, false, false, false);
				
				// Check, which Array elements are dynamic. Set empy replace and flag in new array
				$i = 0;
				$exampleReplaceEntryBuilding = array();
				while($i < count($replaceEntryBuilding)) { 
					if ($replaceEntryBuilding[$i] == $noReplaceEntryBuilding[$i]) {
						$exampleReplaceEntryBuilding[$i] = array(
							'example' => $replaceEntryBuilding[$i],
							'dynamic' => false
						);
					}else {
						$exampleReplaceEntryBuilding[$i] = array(
							'example' => $replaceEntryBuilding[$i],
							'dynamic' => true
						);
					}
					
					$i++;
				}
				
				// Unset not longer needed vars
				unset($replaceEntryBuilding);
				unset($noReplaceEntryBuilding);
				
				#####################################
				## COMBINE URL, URL CLEANED AND ID ##
				#####################################
				
				$i = 0;
				while ($i < (count($_POST['element']) / 9)) {
					$url = $_POST['element'][(($i * 9) + 2)]['url'];
					$urlUncleaned = $_POST['element'][(($i * 9) + 3)]['url_uncleaned'];
					$id = $_POST['element'][(($i * 9) + 6)]['id'];
					
					$_POST['element'][(($i * 9) + 2)] = array(
						array(
							$url,
							$urlUncleaned,
							$id
						)
					);
					
					
					$i++;
				}
				
				#########################
				## SET ASSOCIATE LINKS ##
				#########################
				$i = 0;
				while ($i < (count($_POST['element']) / 9)) {
					// Check if this it not a associate link
					if (!$_POST['element'][($i * 9) + 6]['associate']) {
						// Search for associate links in the following
						$associateLinks = array();
						$i2 = 1;
						while(true) {
							// If this is an associate links, add this to the array, else break the while-loop
							if ($_POST['element'][($i * 9) + 8 + ($i2 * 9)]['associate']) {
								$_POST['element'][($i * 9) + 2][] = $_POST['element'][(($i * 9) + 2 + ($i2 * 9))][0];
							}else {
								break;
							}
							
							$i2++;
						}
					}
					
					$i++;
				}
				
				####################
				## GENNERATE POST ##
				####################
				
				// Set posted elements in $_POST for view
				$_POST['count_elements'] = round((count($_POST['element']) / 9));
				
				// Array for all posted links
				$allPostedLinks = array();
				
				$post_content = '';
				
				// Gennerate all links in text
				$i = 0;
				while ($i < (count($_POST['element']) / 9)) {
					// Check if only not posted links should post
					if (get_option('wppocket_links_to_use') == 0 || get_option('wppocket_links_to_use') == 1 || get_option('wppocket_links_to_use') == 2) {
						// Check if aleady posted. If true, confine to the next loop
						$sql = 'SELECT `id` FROM `' . $this->wpdb->prefix . 'wppocket_posted_links` WHERE `url`="' . $_POST['element'][($i * 9) + 2]['url'] . '"';
						$row = $this->wpdb->get_results($sql);
						
						if ($row[0]->id != '') {
							$_POST['count_elements'] -= count($_POST['element'][($i * 9) + 2]); // - this and associated elements
							$i++;
							continue;
						}
					}
					
					// Check if this it not a associate link
					if (!$_POST['element'][($i * 9) + 8]['associate']) {
						// Gennerate url array in url string
						$url = '';
						
						$i2 = 0;
						foreach ($_POST['element'][($i * 9) + 2] as $value) {
							if ($i2 != 0) {
								$url .= '; ';
							}
							
							$url .= '<a href="' . $value[0] . '" target="_blank">' . $value[0] . '</a>';
							
							// Fill array for all posted links
							$allPostedLinks[] = $value;
							
							$i2++;
						}
						
						// Set element in entry building
						$element = $this->replaceEntryBuilding(
							$_POST['element'][($i * 9)]['title'],
							$_POST['element'][($i * 9) + 5]['description'],
							$url,
							$_POST['element'][($i * 9) + 4]['tags'],
							$_POST['element'][($i * 9) + 1]['author'],
							$_POST['element'][($i * 9) + 7]['countwords']
						);
						
						// Check if a dynamic element is not in use an delete it
						$i2 = 0;
						while ($i2 < count($element)) {
							if ($element[$i2] == $exampleReplaceEntryBuilding[$i2]['example'] && $exampleReplaceEntryBuilding[$i2]['dynamic']) {
								unset($element[$i2]);
							}

							$i2++;
						}
						
						// Set element array as string for the post content
						$post_content .= '<p>';
						
						foreach ($element as $value) {
							$post_content .= $value;
						}
						
						$post_content .= '</p>';
					}
					
					$i++;
				}
				
				$post_content_final = '';
				
				// Set introduction text if not empty
				if (trim(get_option('wppocket_introduction_text')) != '') {
					$post_content_final .= $this->getReplacedIntroductionText($_POST['count_elements']);
				}
				
				// Set links content
				$post_content_final .= $post_content;
				
				// Set statements text if not empty
				if (trim(get_option('wppocket_statements_text')) != '') {
					$post_content_final .= $this->getReplacedStatementsText($_POST['count_elements']);
				}
				
				// Chech if reference to WP Pocket shot print
				if (get_option('wppocket_reference_wppocket')) {
					$post_content_final .= '<p><i>This post was automatically created by WP Pocket. If you look for this WordPress plugin, check out <a href="http://wp-pocket.com/" target="_blank">WP-Pocket.com</a> now!</i></p>';
				}
				
				###############
				## SAVE POST ##
				###############
				
				// Save only, if one or more elements are valid
				if ($_POST['count_elements'] != 0) {
					// Set settings array
					$post = array(
						'comment_status' => get_option('wppocket_comment_status'),
						'ping_status' => get_option('wppocket_ping_status'),
						'post_author' => $current_user->ID,
						'post_category' => array(get_option('wppocket_post_category')),
						'post_content' => $post_content_final,
						'post_date' => date('Y-m-d H:i:s'),
						'post_date_gmt' => gmdate('Y-m-d H:i:s'),
						'post_status' => get_option('wppocket_post_status'),
						'post_title' => $this->getReplacedTitle($_POST['count_elements']),
						'post_type' => 'post'
					);
					
					// Insert the post
					wp_insert_post($post);
				}
				
				##########################
				## SAVE LINKS AS POSTED ##
				##########################
				
				// Save only, if one or more elements are valid
				if ($_POST['count_elements'] != 0) {
					// Set currently time
					$time = time();
					
					$i = 0;
					while ($i < count($allPostedLinks)) {
						$sql = 'SELECT `id` FROM `' . $this->wpdb->prefix . 'wppocket_posted_links` WHERE `url`="' . $allPostedLinks[$i][1] . '"';
						$row = $this->wpdb->get_results($sql);
						
						// Save only it already not saved
						if ($row[0]->id == '') {
							$sql = '
							INSERT IGNORE INTO `' . $this->wpdb->prefix . 'wppocket_posted_links` (
								`url`,
								`timestamp`
							)
							VALUES
								(%s, %s)
							';
							
							// Save link as posted
							$this->wpdb->query(
								$this->wpdb->prepare(
									$sql,
									$allPostedLinks[$i][1],
									$time
								)
							);
						}
						
						$i++;
					}
				}
				
				#################################
				## SET STATUS READED IN POCKET ##
				#################################
				
				// Check if link should marke as readed
				if (get_option('wppocket_mark_as_readed')) {
					$markAsReaded = array();
					
					// Fill JSON as Array
					$i = 0;
					while ($i < count($allPostedLinks)) {
						$markAsReaded[] = array(
							'action' => 'archive',
							'item_id' => $allPostedLinks[$i][2]
						);
						
						$i++;
						
						// Chech if limit of links reached. If yes, send request and start new sends array
						if (($i / 100) == round($i / 100)) {
							// Send request
							$this->cURL(
								'https://getpocket.com/v3/send',
								array(
									'consumer_key' => $this->xcrypt(1, get_option('wppocket_pocket_consumer_key')),
									'access_token' => $this->xcrypt(1, get_option('wppocket_pocket_access_key')),
									'actions' => json_encode($markAsReaded)
								)
							);
							
							// Clean up array
							$markAsReaded = array();
						}
					}
					
					// Send request
					$this->cURL(
						'https://getpocket.com/v3/send',
						array(
							'consumer_key' => $this->xcrypt(1, get_option('wppocket_pocket_consumer_key')),
							'access_token' => $this->xcrypt(1, get_option('wppocket_pocket_access_key')),
							'actions' => json_encode($markAsReaded)
						)
					);
				}
				
				// Send statistics, if allowed
				if (get_option('wppocket_statistics') == 1) {
					$allLinksForStatisics = array();
					$i = 0;
					while ($i < count($allPostedLinks)) {
						$allLinksForStatisics[] = $allPostedLinks[$i][0];
						
						$i++;
					}
					
					$this->statisticsPublishPost($allLinksForStatisics);
				}
			}
		}
		
		// Statisics send to WP-Pocket.com: Update version
		private function statisticsUpdateVersion() {
			// Get Data
			$url = explode('?', ((empty($_SERVER['HTTPS'])) ? 'http' : 'https') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
			$url = $url[0];
			$type = 'update';
			$versions = array('from' => get_option('wppocket_version'), 'to' => $this->version);
			
			// Gennerate JSON Array
			$data = array(
				'url' => $url,
				'type' => $type,
				'update' => $versions
			);
			
			@$this->cURL(
				'http://pluginstats.wp-pocket.com/index.php',
				array(
					'data' => json_encode($data)
				)
			);
		}
		
		// Statisics send to WP-Pocket.com: Publish post
		private function statisticsPublishPost($links) {
			// Get Data
			$url = explode('?', ((empty($_SERVER['HTTPS'])) ? 'http' : 'https') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
			$url = $url[0];
			$type = 'publish';
			
			// Gennerate JSON Array
			$data = array(
				'url' => $url,
				'type' => $type,
				'links' => $links
			);
			
			echo $this->cURL(
				'http://pluginstats.wp-pocket.com/index.php',
				array(
					'data' => json_encode($data)
				)
			);
		}
	}
}

// Init the plugin in wordpress
if(class_exists('wppocketer')) {
	$wppocketer = new wppocketer();
}

if(isset($wppocketer)) {
	add_action('init', array(&$wppocketer, 'activate'));
}
?>